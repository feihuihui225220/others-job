##########################################################连接池设置################################################################################

#数据库驱动
jdbc.driverClassName=com.mysql.jdbc.Driver

##开发用数据库--外网
#jdbc.url=jdbc:mysql://114.251.187.71:3306/caremanager_test?useUnicode=true&characterEncoding=UTF8
#jdbc.username=root
#jdbc.password=root@71
#jdbc.url=jdbc:mysql://117.121.38.204:3306/caremanager_test?useUnicode=true&characterncoding=UTF8
#jdbc.username=carmanager_test
#jdbc.password=caremanag#er_test@admin
jdbc.url=jdbc:mysql://117.121.38.76:3000/caremanager?useUnicode=true&characterEncoding=UTF8
jdbc.username=root
jdbc.password=root@admin
#jdbc.url=jdbc:mysql://localhost:3306/caremanager_test?useUnicode=true&characterEncoding=UTF-8
#jdbc.username=root
#jdbc.password=root


#初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3
jdbc.initSize=5

#连接池中保留的最小连接数
jdbc.minSize=10

#连接池中保留的最大连接数。Default: 15
jdbc.maxSize=20

#最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0
jdbc.maxIdleTime=60

#当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3
jdbc.acquireIncrement=5

#JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
#如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0
jdbc.maxStatements=0

#每60秒检查所有连接池中的空闲连接。Default: 0
jdbc.idleConnectionTestPeriod=60

#定义在从数据库获取新连接失败后重复尝试的次数。Default: 30
jdbc.acquireRetryAttempts=30

#获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。
#如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false
jdbc.breakAfterAcquireFailure=true

#因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false
jdbc.testConnectionOnCheckout=false

#automaticTestTable作为测试connection是否有效的表，如果表存在，但有记录，抛出错误，如果表不存在，则建立，并使用SELECT * FROM automaticTestTable 作为连接测试语句 
jdbc.automaticTestTable=

##########################################################Hibernate设置#############################################################################

#SQL方言 允许Hibernate针对特定的关系数据库生成优化的SQL
hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect

#输出所有SQL语句到控制台. 有一个另外的选择是把org.hibernate.SQL这个log category设为debug。 eg. true | false 
hibernate.show_sql=true

#在log和console中打印出更漂亮的SQL。 取值 true | false 
hibernate.format_sql=true

#如果开启, Hibernate将在SQL中生成有助于调试的注释信息, 默认值为false. 取值 true | false
hibernate.use_sql_comments= 

#为单向关联(一对一, 多对一)的外连接抓取（outer join fetch）树设置最大深度. 值为0意味着将关闭默认的外连接抓取. 取值 建议在0到3之间取值
hibernate.max_fetch_depth=

#Hibernate关联的批量抓取设置默认数量. 取值 建议的取值为4, 8, 和16
hibernate.default_batch_fetch_size=

#由这个SessionFactory打开的所有Session指定默认的实体表现模式. 取值 dynamic-map, dom4j, pojo
hibernate.default_entity_mode=

#强制Hibernate按照被更新数据的主键，为SQL更新排序。这么做将减少在高并发系统中事务的死锁。 取值 true | false
hibernate.order_updates=

#非零值，指定JDBC抓取数量的大小 (调用Statement.setFetchSize())
hibernate.jdbc.fetch_size=

#非零值，允许Hibernate使用JDBC2的批量更新. 取值 建议取5到30之间的值
hibernate.jdbc.batch_size=

#如果你想让你的JDBC驱动从executeBatch()返回正确的行计数 , 那么将此属性设为true(开启这个选项通常是安全的). 同时，Hibernate将为自动版本化的数据使用批量DML. 默认值为false. eg. true | false
hibernate.jdbc.batch_versioned_data=

#允许Hibernate使用JDBC2的可滚动结果集. 只有在使用用户提供的JDBC连接时，这个选项才是必要的, 否则Hibernate会使用连接的元数据. 取值 true | false
hibernate.jdbc.use_scrollable_resultset=

#在JDBC读写binary (二进制)或serializable (可序列化) 的类型时使用流(stream)(系统级属性). 取值 true | false
hibernate.jdbc.use_streams_for_binary=

#在数据插入数据库之后，允许使用JDBC3 PreparedStatement.getGeneratedKeys() 来获取数据库生成的key(键)。需要JDBC3+驱动和JRE1.4+, 如果你的数据库驱动在使用Hibernate的标 识生成器时遇到问题，请将此值设为false. 默认情况下将使用连接的元数据来判定驱动的能力. 取值 true|false
hibernate.jdbc.use_get_generated_keys=

#自定义ConnectionProvider的类名, 此类用来向Hibernate提供JDBC连接. 取值 classname.of.ConnectionProvider
hibernate.connection.provider_class=

#设置JDBC事务隔离级别. 查看java.sql.Connection来了解各个值的具体意义, 但请注意多数数据库都不支持所有的隔离级别. 取值 1, 2, 4, 8
hibernate.connection.isolation=

#允许被缓存的JDBC连接开启自动提交(autocommit) (不建议). 取值 true | false
hibernate.connection.autocommit=false

#指定Hibernate在何时释放JDBC连接. 默认情况下,直到Session被显式关闭或被断开连接时,才会释放JDBC连接. 
#对于应用程序服务器的JTA数据源, 你应当使用after_statement, 这样在每次JDBC调用后，都会主动的释放连接. 
#对于非JTA的连接, 使用after_transaction在每个事务结束时释放连接是合理的. 
#auto将为JTA和CMT事务策略选择after_statement, 为JDBC事务策略选择after_transaction. 取值 on_close | after_transaction | after_statement | auto
hibernate.connection.release_mode=auto

#自定义的CacheProvider的类名. 取值 classname.of.CacheProvider
hibernate.cache.provider_class=

#以频繁的读操作为代价, 优化二级缓存来最小化写操作. 在Hibernate3中，这个设置对的集群缓存非常有用, 对集群缓存的实现而言，默认是开启的. 取值 true|false
hibernate.cache.use_minimal_puts=true

#允许查询缓存, 个别查询仍然需要被设置为可缓存的. 取值 true|false
hibernate.cache.use_query_cache=true

#能用来完全禁止使用二级缓存. 对那些在类的映射定义中指定的类，会默认开启二级缓存. 取值 true|false
hibernate.cache.use_second_level_cache=false

#自定义实现QueryCache接口的类名, 默认为内建的StandardQueryCache. 取值 classname.of.QueryCache
hibernate.cache.query_cache_factory=  

#二级缓存区域名的前缀. 取值 prefix
hibernate.cache.region_prefix=

#强制Hibernate以更人性化的格式将数据存入二级缓存. 取值 true|false
hibernate.cache.use_structured_entries=

#在SessionFactory创建时，自动检查数据库结构，或者将数据库schema的DDL导出到数据库. 使用 create-drop时,在显式关闭SessionFactory时，将drop掉数据库schema. 取值 validate | update | create | create-drop 
#create：表示启动的时候先drop，再create
#create-drop: 也表示创建，只不过再系统关闭前执行一下drop
#update: 这个操作启动的时候会去检查schema是否一致，如果不一致会做scheme更新
#validate: 启动时验证现有schema与你配置的hibernate是否一致，如果不一致就抛出异常，并不做更新
hibernate.hbm2ddl.auto=validate

#为"当前" Session指定一个(自定义的)策略。eg. jta | thread | custom.Class
hibernate.current_session_context_class=  

##########################################################mongodb设置#############################################################################
#mongodb.username=aged
#mongodb.password=aged20140929
#mongodb.databaseName=admin

#mongodb.username=aged
#mongodb.password= aged
#mongodb.databaseName=aged
#mongodb.host=192.168.0.145
mongodb.host=117.121.38.204
#mongodb.port=27017


mongodb.username=workflow
mongodb.password= workflow
mongodb.databaseName=workflow
#mongodb.host=192.168.0.145
#mongodb.host=117.121.38.204
mongodb.port=27017

#mongodb.username=
#mongodb.password=
#mongodb.databaseName=workflow
#mongodb.host=127.0.0.1
#mongodb.port=27017

mongodb.connectionsPerHost=8
mongodb.multiplier=4
mongodb.timeout=15000
mongodb.maxWaitTime=15000
mongodb.autoConnectRetry=true
mongodb.socketKeepAlive=true
mongodb.socketTimeout=15000
mongodb.slaveOk=true
mongodb.writeNumber=1
mongodb.writeTimeout=0
mongodb.writeFsync=true